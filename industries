globals [
         electricity-price
         oil-price
         co2-storage-price
         co2-emission-price
         current-capture-technology-price
         current-capture-technology-capacity
        ]

breed [industries industry]
breed [storage-points storage-point]
directed-link-breed [pipelines pipeline]

industries-own [
                payback-period
                storage-costs
                emission-costs
                energy-costs      ;; Electricity or  ;; probably not used 
                capture-technology-capacity
                capture-technology-price
                distance-storage-point
                electricity-consumption
                oil-consumption
                co2-production 
                OPEX-without-CCS
                OPEX-with-CCS
                CCS-joined
               ]

storage-points-own [capacity]

pipelines-own [
               pipeline-distance
               max-capacity
             ]

to setup
  clear-all
  ask patches [set pcolor green]
  ask patches with [pycor <= max-pycor and pycor >= 5]
    [ set pcolor blue ]
  set-default-shape industries "factory"
  create-industries initial-number-factories
  [
    set color white
    set size 0.5
    setxy random-xcor random-ycor
    set payback-period (1 + random 20)
    set co2-production 10
    set electricity-consumption 3
    set oil-consumption 3
    set CCS-joined False
    
  ]
  set-default-shape storage-points "chess rook"
  createe-storagepoints 2 5
  createe-storagepoints 5 8
  createe-storagepoints 3 7
  set current-capture-technology-price initial-capture-technology-price
  set current-capture-technology-capacity initial-capture-technology-capacity

  
  set electricity-price initial-electricity-price
  set oil-price initial-oil-price
  set co2-emission-price initial-co2-emission-price
  set co2-storage-price initial-co2-storage-price
  
  reset-ticks
end

to createe-storagepoints [ x y ]
  ask patches with [ pycor = y and pxcor = x ]
    [sprout-storage-points 1]
end

to go
  if ticks > 500
    [ stop ]
  capture-technology-development
  update-global-values
  if ticks = 10
    [ build-pipelines ]
  if ticks != 0 and remainder ticks 12 = 0 [
    ask industries with [CCS-joined = False] [ join-CCS ] ]
  tick
end

to build-pipelines
  ask industries [ create-pipeline-to min-one-of storage-points [ distance myself ] ]
end

to capture-technology-development
  if ticks != 0 and remainder ticks 12 = 0
    [
      set current-capture-technology-price current-capture-technology-price * 0.9
      set current-capture-technology-capacity current-capture-technology-capacity * 1.1
    ]
end

to join-CCS
  set OPEX-without-CCS (electricity-price * electricity-consumption + oil-price * oil-consumption + co2-production * co2-emission-price)
  set OPEX-with-CCS ( electricity-price * electricity-consumption + oil-price * oil-consumption + (min(list current-capture-technology-capacity co2-production) * co2-storage-price)  + (max(list (co2-production - current-capture-technology-capacity) 0) * co2-emission-price) )
    
  if ( current-capture-technology-price +  (payback-period * OPEX-with-CCS) < (OPEX-without-CCS * payback-period) )[
    set CCS-joined True
    set color red]
end    

to update-global-values
  if ticks != 0 and remainder ticks 12 = 0 [ 
    set electricity-price electricity-price * 1.05   ;;#uit een csv file halen
    set oil-price oil-price * 1.05
    set co2-emission-price co2-emission-price * 1.05
    set co2-storage-price co2-storage-price * 0.95
  ]
end
